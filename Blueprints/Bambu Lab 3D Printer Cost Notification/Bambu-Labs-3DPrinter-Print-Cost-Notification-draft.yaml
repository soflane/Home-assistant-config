blueprint:
  name: "Bambu Lab 3D Printer Cost Notification"
  description: >
    Calculate filament, electricity, and depreciation costs for each Bambu Lab 3D print,
    and send a Telegram notification with the details and print image when the job completes.
    Supports configurable filament price, energy cost, printer depreciation, and optional cumulative stats tracking.
  domain: automation
  input:
    printer_status_sensor:
      name: Printer Status Sensor
      description: "Sensor showing the printer's status (e.g. idle/prepare/running/finish). Typically sensor.<printer>_print_status from the Bambu Lab integration."
      selector:
        entity:
          integration: bambu_lab
          domain: sensor
          # Ensure to pick the entity ending in _print_status
    print_weight_sensor:
      name: Print Weight Sensor/Helper
      description: "Entity providing the current print's filament weight (in grams). Use the Bambu integration's Print Weight sensor (or an input_number if using a custom G-code parsing script)."
      selector:
        entity:
          # Allow sensor or input_number (weight in grams)
          filter:
            - domain: sensor
            - domain: input_number
    print_length_sensor:
      name: Print Length Sensor/Helper
      description: "Entity providing the current print's filament length (in mm or m). Use the integration's Print Length sensor or an input_number."
      selector:
        entity:
          filter:
            - domain: sensor
            - domain: input_number
    total_usage_sensor:
      name: Total Usage Hours Sensor
      description: "Sensor for the printer's total usage hours (from Bambu integration, e.g. sensor.<printer>_total_usage_hours). Used for all-time stats."
      selector:
        entity:
          integration: bambu_lab
          domain: sensor
    energy_usage_sensor:
      name: Energy Consumption Sensor
      description: "Sensor that tracks cumulative energy (kWh) used by the printer (from a smart plug)."
      selector:
        entity:
          domain: sensor
          device_class: energy
    start_energy_helper:
      name: "Helper – Start kWh"
      description: "Input Number helper to store the printer's energy meter reading at the start of each print."
      selector:
        entity:
          domain: input_number
    filament_price_per_kg:
      name: Filament Price per KG
      description: "Cost of filament per kilogram (in your currency). This will be used to calculate filament cost from the print's weight."
      selector:
        number:
          min: 0.0
          max: 1000.0
          unit_of_measurement: "/kg"
          step: 0.01
      default: 0.0
    energy_cost_per_kwh:
      name: Electricity Cost per kWh
      description: "Your electricity cost per kilowatt-hour."
      selector:
        number:
          min: 0.0
          max: 10.0
          unit_of_measurement: "/kWh"
          step: 0.001
      default: 0.0
    printer_purchase_cost:
      name: Printer Purchase Cost
      description: "What you paid for the 3D printer (for depreciation calculation)."
      selector:
        number:
          min: 0.0
          max: 100000.0
          step: 0.01
      default: 0.0
    printer_lifetime_hours:
      name: Estimated Printer Lifetime (hours)
      description: "Estimated total usage hours for the printer's life (for depreciation). e.g. 2000 hours."
      selector:
        number:
          min: 1
          max: 100000
          step: 1
      default: 10000
    telegram_notify_service:
      name: Telegram Notify Service
      description: "The notify service name for Telegram (e.g., notify.my_telegram_bot)."
      selector:
        text:
      default: "notify.YOUR_TELEGRAM_SERVICE"
    # Optional inputs for pausing notifications and cumulative stats
    sleep_mode_boolean:
      name: "Sleeping Mode Toggle (optional)"
      description: "An input_boolean that indicates 'do not disturb' mode (to suppress pause notifications at night). Leave blank if not used."
      selector:
        entity:
          domain: input_boolean
      default: ""
    cumulative_filament_weight:
      name: "Cumulative Filament Weight (optional)"
      description: "Input Number helper tracking total filament used (grams). (Optional: updated after each print.)"
      selector:
        entity:
          domain: input_number
      default: ""
    cumulative_filament_cost:
      name: "Cumulative Filament Cost (optional)"
      description: "Input Number helper tracking total filament cost. (Optional: updated after each print.)"
      selector:
        entity:
          domain: input_number
      default: ""
    cumulative_electrical_cost:
      name: "Cumulative Electrical Cost (optional)"
      description: "Input Number helper tracking total electrical cost. (Optional: updated after each print.)"
      selector:
        entity:
          domain: input_number
      default: ""
    cumulative_total_cost:
      name: "Cumulative Total Cost (optional)"
      description: "Input Number helper tracking total cost (filament+electric) of all prints. (Optional: updated after each print.)"
      selector:
        entity:
          domain: input_number
      default: ""
    last_print_kwh_used:
      name: "Last Print kWh Used (optional)"
      description: "Input Number helper to record energy (kWh) used by the last print. (Optional: updated after each print.)"
      selector:
        entity:
          domain: input_number
      default: ""
  source_url: "https://coltography.ca/usage-cost-notifications-with-home-assistant-and-bambu-lab-3d-printers/"
 
trigger:
  # Trigger when print job is initiated (goes to 'prepare' state)
  - platform: state
    entity_id: !input printer_status_sensor
    to: "prepare"
    id: prepare
  # Trigger when print job finishes (printer status goes to 'finish')
  - platform: state
    entity_id: !input printer_status_sensor
    to: "finish"
    id: finish
  # Trigger when a print is paused
  - platform: state
    entity_id: !input printer_status_sensor
    to: "pause"
    id: paused

condition: []

action:
  # ========== Prepare: Print Starting ==========
  - alias: "Record energy reading at print start"
    if:
      - condition: trigger
        id: prepare
    then:
      # Store current cumulative energy reading into the "start kWh" helper
      - service: input_number.set_value
        target:
          entity_id: !input start_energy_helper
        data:
          value: "{{ states(!input energy_usage_sensor) | float(0) }}"
      # (Optional) If using the integration's G-code thumbnail, it should be available shortly after prepare.
      # No explicit action needed here if integration auto-populates cover image/print data.

  # ========== Finish: Print Completed ==========
  - alias: "Handle print completed - calculate costs and send notification"
    if:
      - condition: trigger
        id: finish
    then:
      # Give a brief moment for sensors (weight, cover image, etc.) to update at print completion
      - delay: "00:00:02"
      # Define variables for calculations
      - variables:
          # Read sensor values
          end_power: "{{ states(!input energy_usage_sensor) | float(0) }}"
          start_power: "{{ states(!input start_energy_helper) | float(0) }}"
          weight_g: "{{ states(!input print_weight_sensor) | float(0) }}"
          length_mm: "{{ states(!input print_length_sensor) | float(0) }}"
          total_usage_hrs: "{{ states(!input total_usage_sensor) | float(0) }}"
          # Compute basic metrics
          total_kwh: "{{ (end_power - start_power) | float(0) }}"
          filament_cost: "{{ (weight_g * ( !input filament_price_per_kg | float(0) ) / 1000 ) | round(2) }}"
          electrical_cost: "{{ ( total_kwh * ( !input energy_cost_per_kwh | float(0) ) ) | round(2) }}"
          # Compute print duration (from start and end time sensors if available, or from total_usage change if not)
          start_time: "{{ states('sensor.' ~ ( !input printer_status_sensor ).split('.')[1].replace('_print_status','_start_time') ) | as_datetime }}"
          end_time: "{{ states('sensor.' ~ ( !input printer_status_sensor ).split('.')[1].replace('_print_status','_end_time') ) | as_datetime }}"
          duration_seconds: >
            {% if start_time and end_time %}
              {{ (end_time - start_time).total_seconds() }}
            {% else %}
              {{ 0 }}
            {% endif %}
          # <!-- human-readable duration -->
          duration_str: >  
            {% set secs = duration_seconds | float(0) %}
            {% set days = (secs // 86400) | int %}
            {% set hrs = ((secs % 86400) // 3600) | int %}
            {% set mins = ((secs % 3600) // 60) | int %}
            {% set parts = [] %}
            {% if days > 0 %}{% set parts = parts + [days ~ ' day' ~ (days>1 and 's' or '')] %}{% endif %}
            {% if hrs > 0 %}{% set parts = parts + [hrs ~ ' hour' ~ (hrs>1 and 's' or '')] %}{% endif %}
            {% if mins >= 0 %}{% set parts = parts + [mins ~ ' minute' ~ (mins>1 and 's' or '')] %}{% endif %}
            {{ parts | join(', ') }}
          # Printer depreciation cost for this print
          depreciation_cost: >
            {% set hours = duration_seconds / 3600 %}
            {% if ( !input printer_lifetime_hours | float(0) ) > 0 %}
              {{ ( !input printer_purchase_cost | float(0) * (hours / ( !input printer_lifetime_hours | float(1) )) ) | round(2) }}
            {% else %}
              {{ 0 }}
            {% endif %}
      # Update helper values (cumulative stats and last print energy), if provided
      - alias: "Update statistics helpers"
        sequence:
          # Update kWh used for this print (if a helper is provided)
          - choose:
              - conditions: "{{ !input last_print_kwh_used is defined and !input last_print_kwh_used != '' }}"
                sequence:
                  - service: input_number.set_value
                    target:
                      entity_id: !input last_print_kwh_used
                    data:
                      value: "{{ total_kwh | float(0) }}"
          # Update cumulative filament length (in meters) if provided
          - choose:
              - conditions: "{{ !input cumulative_filament_weight != '' }}"
                sequence:
                  - service: input_number.set_value
                    target:
                      entity_id: !input cumulative_filament_weight
                    data:
                      value: >
                        {{ (states(!input cumulative_filament_weight) | float(0)) + (weight_g | float(0)) }}
          - choose:
              - conditions: "{{ !input cumulative_filament_cost != '' }}"
                sequence:
                  - service: input_number.set_value
                    target:
                      entity_id: !input cumulative_filament_cost
                    data:
                      value: >
                        {{ (states(!input cumulative_filament_cost) | float(0)) + (filament_cost | float(0)) }}
          - choose:
              - conditions: "{{ !input cumulative_electrical_cost != '' }}"
                sequence:
                  - service: input_number.set_value
                    target:
                      entity_id: !input cumulative_electrical_cost
                    data:
                      value: >
                        {{ (states(!input cumulative_electrical_cost) | float(0)) + (electrical_cost | float(0)) }}
          - choose:
              - conditions: "{{ !input cumulative_total_cost != '' }}"
                sequence:
                  - service: input_number.set_value
                    target:
                      entity_id: !input cumulative_total_cost
                    data:
                      value: >
                        {{ (states(!input cumulative_total_cost) | float(0)) + ((filament_cost | float(0)) + (electrical_cost | float(0))) }}
      # Define variables for message content (including all-time stats if available)
      - variables:
          length_m: > 
            {% set length_val = length_mm | float(0) %}
            {{ ( length_val / (length_val > 50 and 1000 or 1) ) | round(2) }}
            {# If length_mm seems to be total mm, convert to m (assuming if >50 it's in mm). #}
          length_ft: "{{ (( length_m | float(0) ) * 3.28084 ) | round(2) }}"
          total_cost: "{{ ( filament_cost | float(0) + electrical_cost | float(0) + depreciation_cost | float(0) ) | round(2) }}"
          # All-time cumulative values (post-update)
          cumulative_cost: "{{ states(!input cumulative_total_cost) | float(0) if !input cumulative_total_cost != '' else 0 }}"
          total_filament_g: "{{ states(!input cumulative_filament_weight) | float(0) if !input cumulative_filament_weight != '' else 0 }}"
          total_filament_m: "{{ states(!input cumulative_filament_length) | float(0) if !input cumulative_filament_length != '' else 0 }}"
          # All-time values converted
          total_filament_lbs: "{{ (total_filament_g / 453.5924) | round(2) }}"
          total_filament_ft: "{{ (total_filament_m * 3.28084) | round(2) }}"
      # Send Telegram notification with photo and text
      - service: !input telegram_notify_service
        data:
          message: >-
            **3D Print Completed** 🖨️

            **Duration:** {{ duration_str }}
            **Weight:** {{ weight_g | round(1) }} g (Cost: ${{ filament_cost }})
            **Filament Length:** {{ length_m }} m ({{ length_ft }} ft)
            **Power:** {{ total_kwh | round(3) }} kWh (Cost: ${{ electrical_cost }})
            **Depreciation:** ${{ depreciation_cost }}
            **Total Cost:** ${{ total_cost }}
            {% if !input cumulative_total_cost != '' %}
            ---  
            **All Time Usage:** {{ total_usage_hrs | round(1) }} hours  
            **All Time Cost:** ${{ '%0.2f'|format(cumulative_cost) }}  
            **All Time Filament:** {{ total_filament_lbs }} lbs ({{ total_filament_ft }} ft)
            {% endif %}
          data:
            photo:
              - url: "{{ state_attr(!input printer_status_sensor, 'cover_image') or state_attr('sensor.' ~ ( !input printer_status_sensor ).split('.')[1].replace('_print_status','_cover_image'), 'entity_picture') }}"
                caption: ""
            parse_mode: markdown

  # ========== Paused: Print Paused ==========
  - alias: "Notify on print paused"
    if:
      - condition: trigger
        id: paused
      - condition: or
        conditions:
          # Only send pause alert if no sleep mode enabled or the sleep toggle is off
          - condition: template
            value_template: "{{ !input sleep_mode_boolean == '' }}"
          - condition: state
            entity_id: !input sleep_mode_boolean
            state: "off"
    then:
      - service: !input telegram_notify_service
        data:
          message: "⏸️ 3D Printer has **paused** the print job."
          # (You could also include an image or other actions if desired)
